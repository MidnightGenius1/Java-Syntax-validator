
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COMMA DTYPE ID LBRACE LFLOWER PRIVATE PROTECTED PUBLIC RBRACE RETURN RFLOWER SEMICOLON STATIC\n    funcDeclaration : accessModifier statickw DTYPE funcname LBRACE params RBRACE LFLOWER statements RETURN RFLOWER\n                    | accessModifier DTYPE funcname LBRACE params RBRACE LFLOWER statements RETURN RFLOWER\n    \n    accessModifier : PUBLIC\n                   | PROTECTED\n                   | PRIVATE\n                   | \n    \n    statickw : STATIC\n    \n    funcname : ID\n    \n    params : DTYPE ID COMMA params\n           | DTYPE ID \n           |\n    \n    statements  : statements statement\n                | statement\n    \n    statement   : list SEMICOLON\n                | \n    \n    list    : ID list\n            | ID\n    '
    
_lr_action_items = {'PUBLIC':([0,],[3,]),'PROTECTED':([0,],[4,]),'PRIVATE':([0,],[5,]),'DTYPE':([0,2,3,4,5,6,8,13,14,21,],[-6,7,-3,-4,-5,9,-7,15,15,15,]),'STATIC':([0,2,3,4,5,],[-6,8,-3,-4,-5,]),'$end':([1,35,36,],[0,-2,-1,]),'ID':([7,9,15,22,23,25,26,28,29,31,32,],[11,11,18,28,28,28,-13,28,28,-12,-14,]),'LBRACE':([10,11,12,],[13,-8,14,]),'RBRACE':([13,14,16,17,18,21,24,],[-11,-11,19,20,-10,-11,-9,]),'COMMA':([18,],[21,]),'LFLOWER':([19,20,],[22,23,]),'RETURN':([22,23,25,26,29,31,32,],[-15,-15,30,-13,34,-12,-14,]),'SEMICOLON':([27,28,33,],[32,-17,-16,]),'RFLOWER':([30,34,],[35,36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'funcDeclaration':([0,],[1,]),'accessModifier':([0,],[2,]),'statickw':([2,],[6,]),'funcname':([7,9,],[10,12,]),'params':([13,14,21,],[16,17,24,]),'statements':([22,23,],[25,29,]),'statement':([22,23,25,29,],[26,26,31,31,]),'list':([22,23,25,28,29,],[27,27,27,33,27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> funcDeclaration","S'",1,None,None,None),
  ('funcDeclaration -> accessModifier statickw DTYPE funcname LBRACE params RBRACE LFLOWER statements RETURN RFLOWER','funcDeclaration',11,'p_funcDeclaration','javaFuncDefParse.py',8),
  ('funcDeclaration -> accessModifier DTYPE funcname LBRACE params RBRACE LFLOWER statements RETURN RFLOWER','funcDeclaration',10,'p_funcDeclaration','javaFuncDefParse.py',9),
  ('accessModifier -> PUBLIC','accessModifier',1,'p_accessModifier','javaFuncDefParse.py',15),
  ('accessModifier -> PROTECTED','accessModifier',1,'p_accessModifier','javaFuncDefParse.py',16),
  ('accessModifier -> PRIVATE','accessModifier',1,'p_accessModifier','javaFuncDefParse.py',17),
  ('accessModifier -> <empty>','accessModifier',0,'p_accessModifier','javaFuncDefParse.py',18),
  ('statickw -> STATIC','statickw',1,'p_statickw','javaFuncDefParse.py',27),
  ('funcname -> ID','funcname',1,'p_funcname','javaFuncDefParse.py',34),
  ('params -> DTYPE ID COMMA params','params',4,'p_params','javaFuncDefParse.py',41),
  ('params -> DTYPE ID','params',2,'p_params','javaFuncDefParse.py',42),
  ('params -> <empty>','params',0,'p_params','javaFuncDefParse.py',43),
  ('statements -> statements statement','statements',2,'p_statements','javaFuncDefParse.py',55),
  ('statements -> statement','statements',1,'p_statements','javaFuncDefParse.py',56),
  ('statement -> list SEMICOLON','statement',2,'p_statement','javaFuncDefParse.py',65),
  ('statement -> <empty>','statement',0,'p_statement','javaFuncDefParse.py',66),
  ('list -> ID list','list',2,'p_list','javaFuncDefParse.py',75),
  ('list -> ID','list',1,'p_list','javaFuncDefParse.py',76),
]

Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> funcDeclaration
Rule 1     funcDeclaration -> accessModifier statickw DTYPE funcname LBRACE params RBRACE LFLOWER statements RETURN RFLOWER
Rule 2     funcDeclaration -> accessModifier DTYPE funcname LBRACE params RBRACE LFLOWER statements RETURN RFLOWER
Rule 3     accessModifier -> PUBLIC
Rule 4     accessModifier -> PROTECTED
Rule 5     accessModifier -> PRIVATE
Rule 6     accessModifier -> <empty>
Rule 7     statickw -> STATIC
Rule 8     funcname -> ID
Rule 9     params -> DTYPE ID COMMA params
Rule 10    params -> DTYPE ID
Rule 11    params -> <empty>
Rule 12    statements -> statements statement
Rule 13    statements -> statement
Rule 14    statement -> list SEMICOLON
Rule 15    statement -> <empty>
Rule 16    list -> ID list
Rule 17    list -> ID

Terminals, with rules where they appear

COMMA                : 9
DTYPE                : 1 2 9 10
ID                   : 8 9 10 16 17
LBRACE               : 1 2
LFLOWER              : 1 2
PRIVATE              : 5
PROTECTED            : 4
PUBLIC               : 3
RBRACE               : 1 2
RETURN               : 1 2
RFLOWER              : 1 2
SEMICOLON            : 14
STATIC               : 7
error                : 

Nonterminals, with rules where they appear

accessModifier       : 1 2
funcDeclaration      : 0
funcname             : 1 2
list                 : 14 16
params               : 1 2 9
statement            : 12 13
statements           : 1 2 12
statickw             : 1

Parsing method: LALR

state 0

    (0) S' -> . funcDeclaration
    (1) funcDeclaration -> . accessModifier statickw DTYPE funcname LBRACE params RBRACE LFLOWER statements RETURN RFLOWER
    (2) funcDeclaration -> . accessModifier DTYPE funcname LBRACE params RBRACE LFLOWER statements RETURN RFLOWER
    (3) accessModifier -> . PUBLIC
    (4) accessModifier -> . PROTECTED
    (5) accessModifier -> . PRIVATE
    (6) accessModifier -> .

    PUBLIC          shift and go to state 3
    PROTECTED       shift and go to state 4
    PRIVATE         shift and go to state 5
    DTYPE           reduce using rule 6 (accessModifier -> .)
    STATIC          reduce using rule 6 (accessModifier -> .)

    funcDeclaration                shift and go to state 1
    accessModifier                 shift and go to state 2

state 1

    (0) S' -> funcDeclaration .



state 2

    (1) funcDeclaration -> accessModifier . statickw DTYPE funcname LBRACE params RBRACE LFLOWER statements RETURN RFLOWER
    (2) funcDeclaration -> accessModifier . DTYPE funcname LBRACE params RBRACE LFLOWER statements RETURN RFLOWER
    (7) statickw -> . STATIC

    DTYPE           shift and go to state 7
    STATIC          shift and go to state 8

    statickw                       shift and go to state 6

state 3

    (3) accessModifier -> PUBLIC .

    DTYPE           reduce using rule 3 (accessModifier -> PUBLIC .)
    STATIC          reduce using rule 3 (accessModifier -> PUBLIC .)


state 4

    (4) accessModifier -> PROTECTED .

    DTYPE           reduce using rule 4 (accessModifier -> PROTECTED .)
    STATIC          reduce using rule 4 (accessModifier -> PROTECTED .)


state 5

    (5) accessModifier -> PRIVATE .

    DTYPE           reduce using rule 5 (accessModifier -> PRIVATE .)
    STATIC          reduce using rule 5 (accessModifier -> PRIVATE .)


state 6

    (1) funcDeclaration -> accessModifier statickw . DTYPE funcname LBRACE params RBRACE LFLOWER statements RETURN RFLOWER

    DTYPE           shift and go to state 9


state 7

    (2) funcDeclaration -> accessModifier DTYPE . funcname LBRACE params RBRACE LFLOWER statements RETURN RFLOWER
    (8) funcname -> . ID

    ID              shift and go to state 11

    funcname                       shift and go to state 10

state 8

    (7) statickw -> STATIC .

    DTYPE           reduce using rule 7 (statickw -> STATIC .)


state 9

    (1) funcDeclaration -> accessModifier statickw DTYPE . funcname LBRACE params RBRACE LFLOWER statements RETURN RFLOWER
    (8) funcname -> . ID

    ID              shift and go to state 11

    funcname                       shift and go to state 12

state 10

    (2) funcDeclaration -> accessModifier DTYPE funcname . LBRACE params RBRACE LFLOWER statements RETURN RFLOWER

    LBRACE          shift and go to state 13


state 11

    (8) funcname -> ID .

    LBRACE          reduce using rule 8 (funcname -> ID .)


state 12

    (1) funcDeclaration -> accessModifier statickw DTYPE funcname . LBRACE params RBRACE LFLOWER statements RETURN RFLOWER

    LBRACE          shift and go to state 14


state 13

    (2) funcDeclaration -> accessModifier DTYPE funcname LBRACE . params RBRACE LFLOWER statements RETURN RFLOWER
    (9) params -> . DTYPE ID COMMA params
    (10) params -> . DTYPE ID
    (11) params -> .

    DTYPE           shift and go to state 15
    RBRACE          reduce using rule 11 (params -> .)

    params                         shift and go to state 16

state 14

    (1) funcDeclaration -> accessModifier statickw DTYPE funcname LBRACE . params RBRACE LFLOWER statements RETURN RFLOWER
    (9) params -> . DTYPE ID COMMA params
    (10) params -> . DTYPE ID
    (11) params -> .

    DTYPE           shift and go to state 15
    RBRACE          reduce using rule 11 (params -> .)

    params                         shift and go to state 17

state 15

    (9) params -> DTYPE . ID COMMA params
    (10) params -> DTYPE . ID

    ID              shift and go to state 18


state 16

    (2) funcDeclaration -> accessModifier DTYPE funcname LBRACE params . RBRACE LFLOWER statements RETURN RFLOWER

    RBRACE          shift and go to state 19


state 17

    (1) funcDeclaration -> accessModifier statickw DTYPE funcname LBRACE params . RBRACE LFLOWER statements RETURN RFLOWER

    RBRACE          shift and go to state 20


state 18

    (9) params -> DTYPE ID . COMMA params
    (10) params -> DTYPE ID .

    COMMA           shift and go to state 21
    RBRACE          reduce using rule 10 (params -> DTYPE ID .)


state 19

    (2) funcDeclaration -> accessModifier DTYPE funcname LBRACE params RBRACE . LFLOWER statements RETURN RFLOWER

    LFLOWER         shift and go to state 22


state 20

    (1) funcDeclaration -> accessModifier statickw DTYPE funcname LBRACE params RBRACE . LFLOWER statements RETURN RFLOWER

    LFLOWER         shift and go to state 23


state 21

    (9) params -> DTYPE ID COMMA . params
    (9) params -> . DTYPE ID COMMA params
    (10) params -> . DTYPE ID
    (11) params -> .

    DTYPE           shift and go to state 15
    RBRACE          reduce using rule 11 (params -> .)

    params                         shift and go to state 24

state 22

    (2) funcDeclaration -> accessModifier DTYPE funcname LBRACE params RBRACE LFLOWER . statements RETURN RFLOWER
    (12) statements -> . statements statement
    (13) statements -> . statement
    (14) statement -> . list SEMICOLON
    (15) statement -> .
    (16) list -> . ID list
    (17) list -> . ID

  ! shift/reduce conflict for ID resolved as shift
    RETURN          reduce using rule 15 (statement -> .)
    ID              shift and go to state 28

  ! ID              [ reduce using rule 15 (statement -> .) ]

    statements                     shift and go to state 25
    statement                      shift and go to state 26
    list                           shift and go to state 27

state 23

    (1) funcDeclaration -> accessModifier statickw DTYPE funcname LBRACE params RBRACE LFLOWER . statements RETURN RFLOWER
    (12) statements -> . statements statement
    (13) statements -> . statement
    (14) statement -> . list SEMICOLON
    (15) statement -> .
    (16) list -> . ID list
    (17) list -> . ID

  ! shift/reduce conflict for ID resolved as shift
    RETURN          reduce using rule 15 (statement -> .)
    ID              shift and go to state 28

  ! ID              [ reduce using rule 15 (statement -> .) ]

    statements                     shift and go to state 29
    statement                      shift and go to state 26
    list                           shift and go to state 27

state 24

    (9) params -> DTYPE ID COMMA params .

    RBRACE          reduce using rule 9 (params -> DTYPE ID COMMA params .)


state 25

    (2) funcDeclaration -> accessModifier DTYPE funcname LBRACE params RBRACE LFLOWER statements . RETURN RFLOWER
    (12) statements -> statements . statement
    (14) statement -> . list SEMICOLON
    (15) statement -> .
    (16) list -> . ID list
    (17) list -> . ID

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    RETURN          shift and go to state 30
    ID              shift and go to state 28

  ! RETURN          [ reduce using rule 15 (statement -> .) ]
  ! ID              [ reduce using rule 15 (statement -> .) ]

    statement                      shift and go to state 31
    list                           shift and go to state 27

state 26

    (13) statements -> statement .

    RETURN          reduce using rule 13 (statements -> statement .)
    ID              reduce using rule 13 (statements -> statement .)


state 27

    (14) statement -> list . SEMICOLON

    SEMICOLON       shift and go to state 32


state 28

    (16) list -> ID . list
    (17) list -> ID .
    (16) list -> . ID list
    (17) list -> . ID

    SEMICOLON       reduce using rule 17 (list -> ID .)
    ID              shift and go to state 28

    list                           shift and go to state 33

state 29

    (1) funcDeclaration -> accessModifier statickw DTYPE funcname LBRACE params RBRACE LFLOWER statements . RETURN RFLOWER
    (12) statements -> statements . statement
    (14) statement -> . list SEMICOLON
    (15) statement -> .
    (16) list -> . ID list
    (17) list -> . ID

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    RETURN          shift and go to state 34
    ID              shift and go to state 28

  ! RETURN          [ reduce using rule 15 (statement -> .) ]
  ! ID              [ reduce using rule 15 (statement -> .) ]

    statement                      shift and go to state 31
    list                           shift and go to state 27

state 30

    (2) funcDeclaration -> accessModifier DTYPE funcname LBRACE params RBRACE LFLOWER statements RETURN . RFLOWER

    RFLOWER         shift and go to state 35


state 31

    (12) statements -> statements statement .

    RETURN          reduce using rule 12 (statements -> statements statement .)
    ID              reduce using rule 12 (statements -> statements statement .)


state 32

    (14) statement -> list SEMICOLON .

    RETURN          reduce using rule 14 (statement -> list SEMICOLON .)
    ID              reduce using rule 14 (statement -> list SEMICOLON .)


state 33

    (16) list -> ID list .

    SEMICOLON       reduce using rule 16 (list -> ID list .)


state 34

    (1) funcDeclaration -> accessModifier statickw DTYPE funcname LBRACE params RBRACE LFLOWER statements RETURN . RFLOWER

    RFLOWER         shift and go to state 36


state 35

    (2) funcDeclaration -> accessModifier DTYPE funcname LBRACE params RBRACE LFLOWER statements RETURN RFLOWER .

    $end            reduce using rule 2 (funcDeclaration -> accessModifier DTYPE funcname LBRACE params RBRACE LFLOWER statements RETURN RFLOWER .)


state 36

    (1) funcDeclaration -> accessModifier statickw DTYPE funcname LBRACE params RBRACE LFLOWER statements RETURN RFLOWER .

    $end            reduce using rule 1 (funcDeclaration -> accessModifier statickw DTYPE funcname LBRACE params RBRACE LFLOWER statements RETURN RFLOWER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 22 resolved as shift
WARNING: shift/reduce conflict for ID in state 23 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 25 resolved as shift
WARNING: shift/reduce conflict for ID in state 25 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 29 resolved as shift
WARNING: shift/reduce conflict for ID in state 29 resolved as shift

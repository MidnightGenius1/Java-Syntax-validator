Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> if_statement
Rule 1     if_statement -> IF LBRACE conditions RBRACE LFLOWER statements RFLOWER
Rule 2     if_statement -> IF LBRACE conditions RBRACE LFLOWER statements RFLOWER ELSE if_statement
Rule 3     if_statement -> ELSE statements
Rule 4     statements -> statements statement
Rule 5     statements -> statement
Rule 6     statement -> list SEMICOLON
Rule 7     statement -> if_statement
Rule 8     statement -> empty
Rule 9     list -> ID list
Rule 10    list -> ID
Rule 11    empty -> <empty>
Rule 12    conditions -> ID EQUALS ID
Rule 13    conditions -> ID GREATER ID
Rule 14    conditions -> ID LESSER ID
Rule 15    conditions -> ID GREATER EQUALS ID
Rule 16    conditions -> ID LESSER EQUALS ID
Rule 17    conditions -> ID NOT EQUALS ID
Rule 18    conditions -> conditions AND conditions
Rule 19    conditions -> conditions OR conditions
Rule 20    conditions -> ID

Terminals, with rules where they appear

AND                  : 18
ELSE                 : 2 3
EQUALS               : 12 15 16 17
GREATER              : 13 15
ID                   : 9 10 12 12 13 13 14 14 15 15 16 16 17 17 20
IF                   : 1 2
LBRACE               : 1 2
LESSER               : 14 16
LFLOWER              : 1 2
NOT                  : 17
OR                   : 19
RBRACE               : 1 2
RFLOWER              : 1 2
SEMICOLON            : 6
error                : 

Nonterminals, with rules where they appear

conditions           : 1 2 18 18 19 19
empty                : 8
if_statement         : 2 7 0
list                 : 6 9
statement            : 4 5
statements           : 1 2 3 4

Parsing method: LALR

state 0

    (0) S' -> . if_statement
    (1) if_statement -> . IF LBRACE conditions RBRACE LFLOWER statements RFLOWER
    (2) if_statement -> . IF LBRACE conditions RBRACE LFLOWER statements RFLOWER ELSE if_statement
    (3) if_statement -> . ELSE statements

    IF              shift and go to state 2
    ELSE            shift and go to state 3

    if_statement                   shift and go to state 1

state 1

    (0) S' -> if_statement .



state 2

    (1) if_statement -> IF . LBRACE conditions RBRACE LFLOWER statements RFLOWER
    (2) if_statement -> IF . LBRACE conditions RBRACE LFLOWER statements RFLOWER ELSE if_statement

    LBRACE          shift and go to state 4


state 3

    (3) if_statement -> ELSE . statements
    (4) statements -> . statements statement
    (5) statements -> . statement
    (6) statement -> . list SEMICOLON
    (7) statement -> . if_statement
    (8) statement -> . empty
    (9) list -> . ID list
    (10) list -> . ID
    (1) if_statement -> . IF LBRACE conditions RBRACE LFLOWER statements RFLOWER
    (2) if_statement -> . IF LBRACE conditions RBRACE LFLOWER statements RFLOWER ELSE if_statement
    (3) if_statement -> . ELSE statements
    (11) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    ID              shift and go to state 10
    IF              shift and go to state 2
    ELSE            shift and go to state 3
    $end            reduce using rule 11 (empty -> .)
    RFLOWER         reduce using rule 11 (empty -> .)

  ! ID              [ reduce using rule 11 (empty -> .) ]
  ! IF              [ reduce using rule 11 (empty -> .) ]
  ! ELSE            [ reduce using rule 11 (empty -> .) ]

    statements                     shift and go to state 5
    statement                      shift and go to state 6
    list                           shift and go to state 7
    if_statement                   shift and go to state 8
    empty                          shift and go to state 9

state 4

    (1) if_statement -> IF LBRACE . conditions RBRACE LFLOWER statements RFLOWER
    (2) if_statement -> IF LBRACE . conditions RBRACE LFLOWER statements RFLOWER ELSE if_statement
    (12) conditions -> . ID EQUALS ID
    (13) conditions -> . ID GREATER ID
    (14) conditions -> . ID LESSER ID
    (15) conditions -> . ID GREATER EQUALS ID
    (16) conditions -> . ID LESSER EQUALS ID
    (17) conditions -> . ID NOT EQUALS ID
    (18) conditions -> . conditions AND conditions
    (19) conditions -> . conditions OR conditions
    (20) conditions -> . ID

    ID              shift and go to state 12

    conditions                     shift and go to state 11

state 5

    (3) if_statement -> ELSE statements .
    (4) statements -> statements . statement
    (6) statement -> . list SEMICOLON
    (7) statement -> . if_statement
    (8) statement -> . empty
    (9) list -> . ID list
    (10) list -> . ID
    (1) if_statement -> . IF LBRACE conditions RBRACE LFLOWER statements RFLOWER
    (2) if_statement -> . IF LBRACE conditions RBRACE LFLOWER statements RFLOWER ELSE if_statement
    (3) if_statement -> . ELSE statements
    (11) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 3 (if_statement -> ELSE statements .)
  ! reduce/reduce conflict for RFLOWER resolved using rule 3 (if_statement -> ELSE statements .)
    $end            reduce using rule 3 (if_statement -> ELSE statements .)
    RFLOWER         reduce using rule 3 (if_statement -> ELSE statements .)
    ID              shift and go to state 10
    IF              shift and go to state 2
    ELSE            shift and go to state 3

  ! ID              [ reduce using rule 3 (if_statement -> ELSE statements .) ]
  ! IF              [ reduce using rule 3 (if_statement -> ELSE statements .) ]
  ! ELSE            [ reduce using rule 3 (if_statement -> ELSE statements .) ]
  ! ID              [ reduce using rule 11 (empty -> .) ]
  ! IF              [ reduce using rule 11 (empty -> .) ]
  ! ELSE            [ reduce using rule 11 (empty -> .) ]
  ! $end            [ reduce using rule 11 (empty -> .) ]
  ! RFLOWER         [ reduce using rule 11 (empty -> .) ]

    statement                      shift and go to state 13
    list                           shift and go to state 7
    if_statement                   shift and go to state 8
    empty                          shift and go to state 9

state 6

    (5) statements -> statement .

    ID              reduce using rule 5 (statements -> statement .)
    IF              reduce using rule 5 (statements -> statement .)
    ELSE            reduce using rule 5 (statements -> statement .)
    $end            reduce using rule 5 (statements -> statement .)
    RFLOWER         reduce using rule 5 (statements -> statement .)


state 7

    (6) statement -> list . SEMICOLON

    SEMICOLON       shift and go to state 14


state 8

    (7) statement -> if_statement .

    ID              reduce using rule 7 (statement -> if_statement .)
    IF              reduce using rule 7 (statement -> if_statement .)
    ELSE            reduce using rule 7 (statement -> if_statement .)
    $end            reduce using rule 7 (statement -> if_statement .)
    RFLOWER         reduce using rule 7 (statement -> if_statement .)


state 9

    (8) statement -> empty .

    ID              reduce using rule 8 (statement -> empty .)
    IF              reduce using rule 8 (statement -> empty .)
    ELSE            reduce using rule 8 (statement -> empty .)
    $end            reduce using rule 8 (statement -> empty .)
    RFLOWER         reduce using rule 8 (statement -> empty .)


state 10

    (9) list -> ID . list
    (10) list -> ID .
    (9) list -> . ID list
    (10) list -> . ID

    SEMICOLON       reduce using rule 10 (list -> ID .)
    ID              shift and go to state 10

    list                           shift and go to state 15

state 11

    (1) if_statement -> IF LBRACE conditions . RBRACE LFLOWER statements RFLOWER
    (2) if_statement -> IF LBRACE conditions . RBRACE LFLOWER statements RFLOWER ELSE if_statement
    (18) conditions -> conditions . AND conditions
    (19) conditions -> conditions . OR conditions

    RBRACE          shift and go to state 16
    AND             shift and go to state 17
    OR              shift and go to state 18


state 12

    (12) conditions -> ID . EQUALS ID
    (13) conditions -> ID . GREATER ID
    (14) conditions -> ID . LESSER ID
    (15) conditions -> ID . GREATER EQUALS ID
    (16) conditions -> ID . LESSER EQUALS ID
    (17) conditions -> ID . NOT EQUALS ID
    (20) conditions -> ID .

    EQUALS          shift and go to state 19
    GREATER         shift and go to state 20
    LESSER          shift and go to state 21
    NOT             shift and go to state 22
    RBRACE          reduce using rule 20 (conditions -> ID .)
    AND             reduce using rule 20 (conditions -> ID .)
    OR              reduce using rule 20 (conditions -> ID .)


state 13

    (4) statements -> statements statement .

    ID              reduce using rule 4 (statements -> statements statement .)
    IF              reduce using rule 4 (statements -> statements statement .)
    ELSE            reduce using rule 4 (statements -> statements statement .)
    $end            reduce using rule 4 (statements -> statements statement .)
    RFLOWER         reduce using rule 4 (statements -> statements statement .)


state 14

    (6) statement -> list SEMICOLON .

    ID              reduce using rule 6 (statement -> list SEMICOLON .)
    IF              reduce using rule 6 (statement -> list SEMICOLON .)
    ELSE            reduce using rule 6 (statement -> list SEMICOLON .)
    $end            reduce using rule 6 (statement -> list SEMICOLON .)
    RFLOWER         reduce using rule 6 (statement -> list SEMICOLON .)


state 15

    (9) list -> ID list .

    SEMICOLON       reduce using rule 9 (list -> ID list .)


state 16

    (1) if_statement -> IF LBRACE conditions RBRACE . LFLOWER statements RFLOWER
    (2) if_statement -> IF LBRACE conditions RBRACE . LFLOWER statements RFLOWER ELSE if_statement

    LFLOWER         shift and go to state 23


state 17

    (18) conditions -> conditions AND . conditions
    (12) conditions -> . ID EQUALS ID
    (13) conditions -> . ID GREATER ID
    (14) conditions -> . ID LESSER ID
    (15) conditions -> . ID GREATER EQUALS ID
    (16) conditions -> . ID LESSER EQUALS ID
    (17) conditions -> . ID NOT EQUALS ID
    (18) conditions -> . conditions AND conditions
    (19) conditions -> . conditions OR conditions
    (20) conditions -> . ID

    ID              shift and go to state 12

    conditions                     shift and go to state 24

state 18

    (19) conditions -> conditions OR . conditions
    (12) conditions -> . ID EQUALS ID
    (13) conditions -> . ID GREATER ID
    (14) conditions -> . ID LESSER ID
    (15) conditions -> . ID GREATER EQUALS ID
    (16) conditions -> . ID LESSER EQUALS ID
    (17) conditions -> . ID NOT EQUALS ID
    (18) conditions -> . conditions AND conditions
    (19) conditions -> . conditions OR conditions
    (20) conditions -> . ID

    ID              shift and go to state 12

    conditions                     shift and go to state 25

state 19

    (12) conditions -> ID EQUALS . ID

    ID              shift and go to state 26


state 20

    (13) conditions -> ID GREATER . ID
    (15) conditions -> ID GREATER . EQUALS ID

    ID              shift and go to state 27
    EQUALS          shift and go to state 28


state 21

    (14) conditions -> ID LESSER . ID
    (16) conditions -> ID LESSER . EQUALS ID

    ID              shift and go to state 29
    EQUALS          shift and go to state 30


state 22

    (17) conditions -> ID NOT . EQUALS ID

    EQUALS          shift and go to state 31


state 23

    (1) if_statement -> IF LBRACE conditions RBRACE LFLOWER . statements RFLOWER
    (2) if_statement -> IF LBRACE conditions RBRACE LFLOWER . statements RFLOWER ELSE if_statement
    (4) statements -> . statements statement
    (5) statements -> . statement
    (6) statement -> . list SEMICOLON
    (7) statement -> . if_statement
    (8) statement -> . empty
    (9) list -> . ID list
    (10) list -> . ID
    (1) if_statement -> . IF LBRACE conditions RBRACE LFLOWER statements RFLOWER
    (2) if_statement -> . IF LBRACE conditions RBRACE LFLOWER statements RFLOWER ELSE if_statement
    (3) if_statement -> . ELSE statements
    (11) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    ID              shift and go to state 10
    IF              shift and go to state 2
    ELSE            shift and go to state 3
    RFLOWER         reduce using rule 11 (empty -> .)

  ! ID              [ reduce using rule 11 (empty -> .) ]
  ! IF              [ reduce using rule 11 (empty -> .) ]
  ! ELSE            [ reduce using rule 11 (empty -> .) ]

    statements                     shift and go to state 32
    if_statement                   shift and go to state 8
    statement                      shift and go to state 6
    list                           shift and go to state 7
    empty                          shift and go to state 9

state 24

    (18) conditions -> conditions AND conditions .
    (18) conditions -> conditions . AND conditions
    (19) conditions -> conditions . OR conditions

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACE          reduce using rule 18 (conditions -> conditions AND conditions .)
    AND             shift and go to state 17
    OR              shift and go to state 18

  ! AND             [ reduce using rule 18 (conditions -> conditions AND conditions .) ]
  ! OR              [ reduce using rule 18 (conditions -> conditions AND conditions .) ]


state 25

    (19) conditions -> conditions OR conditions .
    (18) conditions -> conditions . AND conditions
    (19) conditions -> conditions . OR conditions

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACE          reduce using rule 19 (conditions -> conditions OR conditions .)
    AND             shift and go to state 17
    OR              shift and go to state 18

  ! AND             [ reduce using rule 19 (conditions -> conditions OR conditions .) ]
  ! OR              [ reduce using rule 19 (conditions -> conditions OR conditions .) ]


state 26

    (12) conditions -> ID EQUALS ID .

    RBRACE          reduce using rule 12 (conditions -> ID EQUALS ID .)
    AND             reduce using rule 12 (conditions -> ID EQUALS ID .)
    OR              reduce using rule 12 (conditions -> ID EQUALS ID .)


state 27

    (13) conditions -> ID GREATER ID .

    RBRACE          reduce using rule 13 (conditions -> ID GREATER ID .)
    AND             reduce using rule 13 (conditions -> ID GREATER ID .)
    OR              reduce using rule 13 (conditions -> ID GREATER ID .)


state 28

    (15) conditions -> ID GREATER EQUALS . ID

    ID              shift and go to state 33


state 29

    (14) conditions -> ID LESSER ID .

    RBRACE          reduce using rule 14 (conditions -> ID LESSER ID .)
    AND             reduce using rule 14 (conditions -> ID LESSER ID .)
    OR              reduce using rule 14 (conditions -> ID LESSER ID .)


state 30

    (16) conditions -> ID LESSER EQUALS . ID

    ID              shift and go to state 34


state 31

    (17) conditions -> ID NOT EQUALS . ID

    ID              shift and go to state 35


state 32

    (1) if_statement -> IF LBRACE conditions RBRACE LFLOWER statements . RFLOWER
    (2) if_statement -> IF LBRACE conditions RBRACE LFLOWER statements . RFLOWER ELSE if_statement
    (4) statements -> statements . statement
    (6) statement -> . list SEMICOLON
    (7) statement -> . if_statement
    (8) statement -> . empty
    (9) list -> . ID list
    (10) list -> . ID
    (1) if_statement -> . IF LBRACE conditions RBRACE LFLOWER statements RFLOWER
    (2) if_statement -> . IF LBRACE conditions RBRACE LFLOWER statements RFLOWER ELSE if_statement
    (3) if_statement -> . ELSE statements
    (11) empty -> .

  ! shift/reduce conflict for RFLOWER resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
    RFLOWER         shift and go to state 36
    ID              shift and go to state 10
    IF              shift and go to state 2
    ELSE            shift and go to state 3

  ! RFLOWER         [ reduce using rule 11 (empty -> .) ]
  ! ID              [ reduce using rule 11 (empty -> .) ]
  ! IF              [ reduce using rule 11 (empty -> .) ]
  ! ELSE            [ reduce using rule 11 (empty -> .) ]

    if_statement                   shift and go to state 8
    statement                      shift and go to state 13
    list                           shift and go to state 7
    empty                          shift and go to state 9

state 33

    (15) conditions -> ID GREATER EQUALS ID .

    RBRACE          reduce using rule 15 (conditions -> ID GREATER EQUALS ID .)
    AND             reduce using rule 15 (conditions -> ID GREATER EQUALS ID .)
    OR              reduce using rule 15 (conditions -> ID GREATER EQUALS ID .)


state 34

    (16) conditions -> ID LESSER EQUALS ID .

    RBRACE          reduce using rule 16 (conditions -> ID LESSER EQUALS ID .)
    AND             reduce using rule 16 (conditions -> ID LESSER EQUALS ID .)
    OR              reduce using rule 16 (conditions -> ID LESSER EQUALS ID .)


state 35

    (17) conditions -> ID NOT EQUALS ID .

    RBRACE          reduce using rule 17 (conditions -> ID NOT EQUALS ID .)
    AND             reduce using rule 17 (conditions -> ID NOT EQUALS ID .)
    OR              reduce using rule 17 (conditions -> ID NOT EQUALS ID .)


state 36

    (1) if_statement -> IF LBRACE conditions RBRACE LFLOWER statements RFLOWER .
    (2) if_statement -> IF LBRACE conditions RBRACE LFLOWER statements RFLOWER . ELSE if_statement

  ! shift/reduce conflict for ELSE resolved as shift
    $end            reduce using rule 1 (if_statement -> IF LBRACE conditions RBRACE LFLOWER statements RFLOWER .)
    ID              reduce using rule 1 (if_statement -> IF LBRACE conditions RBRACE LFLOWER statements RFLOWER .)
    IF              reduce using rule 1 (if_statement -> IF LBRACE conditions RBRACE LFLOWER statements RFLOWER .)
    RFLOWER         reduce using rule 1 (if_statement -> IF LBRACE conditions RBRACE LFLOWER statements RFLOWER .)
    ELSE            shift and go to state 37

  ! ELSE            [ reduce using rule 1 (if_statement -> IF LBRACE conditions RBRACE LFLOWER statements RFLOWER .) ]


state 37

    (2) if_statement -> IF LBRACE conditions RBRACE LFLOWER statements RFLOWER ELSE . if_statement
    (1) if_statement -> . IF LBRACE conditions RBRACE LFLOWER statements RFLOWER
    (2) if_statement -> . IF LBRACE conditions RBRACE LFLOWER statements RFLOWER ELSE if_statement
    (3) if_statement -> . ELSE statements

    IF              shift and go to state 2
    ELSE            shift and go to state 3

    if_statement                   shift and go to state 38

state 38

    (2) if_statement -> IF LBRACE conditions RBRACE LFLOWER statements RFLOWER ELSE if_statement .

    $end            reduce using rule 2 (if_statement -> IF LBRACE conditions RBRACE LFLOWER statements RFLOWER ELSE if_statement .)
    ID              reduce using rule 2 (if_statement -> IF LBRACE conditions RBRACE LFLOWER statements RFLOWER ELSE if_statement .)
    IF              reduce using rule 2 (if_statement -> IF LBRACE conditions RBRACE LFLOWER statements RFLOWER ELSE if_statement .)
    ELSE            reduce using rule 2 (if_statement -> IF LBRACE conditions RBRACE LFLOWER statements RFLOWER ELSE if_statement .)
    RFLOWER         reduce using rule 2 (if_statement -> IF LBRACE conditions RBRACE LFLOWER statements RFLOWER ELSE if_statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 3 resolved as shift
WARNING: shift/reduce conflict for ID in state 5 resolved as shift
WARNING: shift/reduce conflict for IF in state 5 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 5 resolved as shift
WARNING: shift/reduce conflict for ID in state 5 resolved as shift
WARNING: shift/reduce conflict for IF in state 5 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 5 resolved as shift
WARNING: shift/reduce conflict for ID in state 23 resolved as shift
WARNING: shift/reduce conflict for IF in state 23 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 23 resolved as shift
WARNING: shift/reduce conflict for AND in state 24 resolved as shift
WARNING: shift/reduce conflict for OR in state 24 resolved as shift
WARNING: shift/reduce conflict for AND in state 25 resolved as shift
WARNING: shift/reduce conflict for OR in state 25 resolved as shift
WARNING: shift/reduce conflict for RFLOWER in state 32 resolved as shift
WARNING: shift/reduce conflict for ID in state 32 resolved as shift
WARNING: shift/reduce conflict for IF in state 32 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 32 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 36 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (if_statement -> ELSE statements)
WARNING: rejected rule (empty -> <empty>) in state 5

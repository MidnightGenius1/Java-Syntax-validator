
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ELSE EQUALS GREATER ID IF LBRACE LESSER LFLOWER NOT OR RBRACE RFLOWER SEMICOLON\n    if_statement    : IF LBRACE conditions RBRACE LFLOWER statements RFLOWER\n                    | IF LBRACE conditions RBRACE LFLOWER statements RFLOWER ELSE if_statement\n                    | ELSE statements\n    \n    statements : statements statement\n               | statement\n    \n    statement : list SEMICOLON\n             | if_statement\n             | empty\n    \n    list : ID list \n         | ID\n    \n    empty :\n    \n    conditions  : ID EQUALS ID \n                | ID GREATER ID \n                | ID LESSER ID \n                | ID GREATER EQUALS ID \n                | ID LESSER EQUALS ID \n                | ID NOT EQUALS ID\n                | conditions AND conditions \n                | conditions OR conditions\n                | ID\n    '
    
_lr_action_items = {'IF':([0,3,5,6,8,9,13,14,23,32,36,37,38,],[2,2,2,-5,-7,-8,-4,-6,2,2,-1,2,-2,]),'ELSE':([0,3,5,6,8,9,13,14,23,32,36,37,38,],[3,3,3,-5,-7,-8,-4,-6,3,3,37,3,-2,]),'$end':([1,3,5,6,8,9,13,14,36,38,],[0,-11,-3,-5,-7,-8,-4,-6,-1,-2,]),'LBRACE':([2,],[4,]),'ID':([3,4,5,6,8,9,10,13,14,17,18,19,20,21,23,28,30,31,32,36,38,],[10,12,10,-5,-7,-8,10,-4,-6,12,12,26,27,29,10,33,34,35,10,-1,-2,]),'RFLOWER':([3,5,6,8,9,13,14,23,32,36,38,],[-11,-3,-5,-7,-8,-4,-6,-11,36,-1,-2,]),'SEMICOLON':([7,10,15,],[14,-10,-9,]),'RBRACE':([11,12,24,25,26,27,29,33,34,35,],[16,-20,-18,-19,-12,-13,-14,-15,-16,-17,]),'AND':([11,12,24,25,26,27,29,33,34,35,],[17,-20,17,17,-12,-13,-14,-15,-16,-17,]),'OR':([11,12,24,25,26,27,29,33,34,35,],[18,-20,18,18,-12,-13,-14,-15,-16,-17,]),'EQUALS':([12,20,21,22,],[19,28,30,31,]),'GREATER':([12,],[20,]),'LESSER':([12,],[21,]),'NOT':([12,],[22,]),'LFLOWER':([16,],[23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'if_statement':([0,3,5,23,32,37,],[1,8,8,8,8,38,]),'statements':([3,23,],[5,32,]),'statement':([3,5,23,32,],[6,13,6,13,]),'list':([3,5,10,23,32,],[7,7,15,7,7,]),'empty':([3,5,23,32,],[9,9,9,9,]),'conditions':([4,17,18,],[11,24,25,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> if_statement","S'",1,None,None,None),
  ('if_statement -> IF LBRACE conditions RBRACE LFLOWER statements RFLOWER','if_statement',7,'p_if','javaCondifParse.py',10),
  ('if_statement -> IF LBRACE conditions RBRACE LFLOWER statements RFLOWER ELSE if_statement','if_statement',9,'p_if','javaCondifParse.py',11),
  ('if_statement -> ELSE statements','if_statement',2,'p_if','javaCondifParse.py',12),
  ('statements -> statements statement','statements',2,'p_statements','javaCondifParse.py',18),
  ('statements -> statement','statements',1,'p_statements','javaCondifParse.py',19),
  ('statement -> list SEMICOLON','statement',2,'p_statement','javaCondifParse.py',28),
  ('statement -> if_statement','statement',1,'p_statement','javaCondifParse.py',29),
  ('statement -> empty','statement',1,'p_statement','javaCondifParse.py',30),
  ('list -> ID list','list',2,'p_list','javaCondifParse.py',36),
  ('list -> ID','list',1,'p_list','javaCondifParse.py',37),
  ('empty -> <empty>','empty',0,'p_empty','javaCondifParse.py',46),
  ('conditions -> ID EQUALS ID','conditions',3,'p_conditions','javaCondifParse.py',53),
  ('conditions -> ID GREATER ID','conditions',3,'p_conditions','javaCondifParse.py',54),
  ('conditions -> ID LESSER ID','conditions',3,'p_conditions','javaCondifParse.py',55),
  ('conditions -> ID GREATER EQUALS ID','conditions',4,'p_conditions','javaCondifParse.py',56),
  ('conditions -> ID LESSER EQUALS ID','conditions',4,'p_conditions','javaCondifParse.py',57),
  ('conditions -> ID NOT EQUALS ID','conditions',4,'p_conditions','javaCondifParse.py',58),
  ('conditions -> conditions AND conditions','conditions',3,'p_conditions','javaCondifParse.py',59),
  ('conditions -> conditions OR conditions','conditions',3,'p_conditions','javaCondifParse.py',60),
  ('conditions -> ID','conditions',1,'p_conditions','javaCondifParse.py',61),
]
